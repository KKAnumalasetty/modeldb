// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.diff.*;
import ai.verta.modeldb.versioning.blob.diff.Function3;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class PythonEnvironmentBlob implements ProtoType {
  public VersionEnvironmentBlob Version;
  public List<PythonRequirementEnvironmentBlob> Requirements;
  public List<PythonRequirementEnvironmentBlob> Constraints;

  public PythonEnvironmentBlob() {
    this.Version = null;
    this.Requirements = null;
    this.Constraints = null;
  }

  public Boolean isEmpty() {
    if (this.Version != null) {
      return false;
    }
    if (this.Requirements != null) {
      return false;
    }
    if (this.Constraints != null) {
      return false;
    }
    return true;
  }

  // TODO: not consider order on lists
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if (!(o instanceof PythonEnvironmentBlob)) return false;
    PythonEnvironmentBlob other = (PythonEnvironmentBlob) o;

    {
      Function3<VersionEnvironmentBlob, VersionEnvironmentBlob, Boolean> f = (x, y) -> x.equals(y);
      if (this.Version != null || other.Version != null) {
        if (this.Version == null && other.Version != null) return false;
        if (this.Version != null && other.Version == null) return false;
        if (!f.apply(this.Version, other.Version)) return false;
      }
    }
    {
      Function3<
              List<PythonRequirementEnvironmentBlob>,
              List<PythonRequirementEnvironmentBlob>,
              Boolean>
          f =
              (x2, y2) ->
                  IntStream.range(0, Math.min(x2.size(), y2.size()))
                      .mapToObj(
                          i -> {
                            Function3<
                                    PythonRequirementEnvironmentBlob,
                                    PythonRequirementEnvironmentBlob,
                                    Boolean>
                                f2 = (x, y) -> x.equals(y);
                            return f2.apply(x2.get(i), y2.get(i));
                          })
                      .filter(x -> x != null)
                      .collect(Collectors.toList())
                      .isEmpty();
      if (this.Requirements != null || other.Requirements != null) {
        if (this.Requirements == null && other.Requirements != null) return false;
        if (this.Requirements != null && other.Requirements == null) return false;
        if (!f.apply(this.Requirements, other.Requirements)) return false;
      }
    }
    {
      Function3<
              List<PythonRequirementEnvironmentBlob>,
              List<PythonRequirementEnvironmentBlob>,
              Boolean>
          f =
              (x2, y2) ->
                  IntStream.range(0, Math.min(x2.size(), y2.size()))
                      .mapToObj(
                          i -> {
                            Function3<
                                    PythonRequirementEnvironmentBlob,
                                    PythonRequirementEnvironmentBlob,
                                    Boolean>
                                f2 = (x, y) -> x.equals(y);
                            return f2.apply(x2.get(i), y2.get(i));
                          })
                      .filter(x -> x != null)
                      .collect(Collectors.toList())
                      .isEmpty();
      if (this.Constraints != null || other.Constraints != null) {
        if (this.Constraints == null && other.Constraints != null) return false;
        if (this.Constraints != null && other.Constraints == null) return false;
        if (!f.apply(this.Constraints, other.Constraints)) return false;
      }
    }
    return true;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.Version, this.Requirements, this.Constraints);
  }

  public PythonEnvironmentBlob setVersion(VersionEnvironmentBlob value) {
    this.Version = value;
    return this;
  }

  public PythonEnvironmentBlob setRequirements(List<PythonRequirementEnvironmentBlob> value) {
    this.Requirements = value;
    return this;
  }

  public PythonEnvironmentBlob setConstraints(List<PythonRequirementEnvironmentBlob> value) {
    this.Constraints = value;
    return this;
  }

  public static PythonEnvironmentBlob fromProto(
      ai.verta.modeldb.versioning.PythonEnvironmentBlob blob) {
    if (blob == null) {
      return null;
    }

    PythonEnvironmentBlob obj = new PythonEnvironmentBlob();
    {
      Function<ai.verta.modeldb.versioning.PythonEnvironmentBlob, VersionEnvironmentBlob> f =
          x -> VersionEnvironmentBlob.fromProto(blob.getVersion());
      obj.Version = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<
              ai.verta.modeldb.versioning.PythonEnvironmentBlob,
              List<PythonRequirementEnvironmentBlob>>
          f =
              x ->
                  blob.getRequirementsList().stream()
                      .map(PythonRequirementEnvironmentBlob::fromProto)
                      .collect(Collectors.toList());
      obj.Requirements = Utils.removeEmpty(f.apply(blob));
    }
    {
      Function<
              ai.verta.modeldb.versioning.PythonEnvironmentBlob,
              List<PythonRequirementEnvironmentBlob>>
          f =
              x ->
                  blob.getConstraintsList().stream()
                      .map(PythonRequirementEnvironmentBlob::fromProto)
                      .collect(Collectors.toList());
      obj.Constraints = Utils.removeEmpty(f.apply(blob));
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.PythonEnvironmentBlob.Builder toProto() {
    ai.verta.modeldb.versioning.PythonEnvironmentBlob.Builder builder =
        ai.verta.modeldb.versioning.PythonEnvironmentBlob.newBuilder();
    {
      if (this.Version != null) {
        Function<ai.verta.modeldb.versioning.PythonEnvironmentBlob.Builder, Void> f =
            x -> {
              builder.setVersion(this.Version.toProto());
              return null;
            };
        f.apply(builder);
      }
    }
    {
      if (this.Requirements != null) {
        Function<ai.verta.modeldb.versioning.PythonEnvironmentBlob.Builder, Void> f =
            x -> {
              builder.addAllRequirements(
                  this.Requirements.stream()
                      .map(y -> y.toProto().build())
                      .collect(Collectors.toList()));
              return null;
            };
        f.apply(builder);
      }
    }
    {
      if (this.Constraints != null) {
        Function<ai.verta.modeldb.versioning.PythonEnvironmentBlob.Builder, Void> f =
            x -> {
              builder.addAllConstraints(
                  this.Constraints.stream()
                      .map(y -> y.toProto().build())
                      .collect(Collectors.toList()));
              return null;
            };
        f.apply(builder);
      }
    }
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitPythonEnvironmentBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    visitor.preVisitDeepVersionEnvironmentBlob(this.Version);
    visitor.preVisitDeepListOfPythonRequirementEnvironmentBlob(this.Requirements);
    visitor.preVisitDeepListOfPythonRequirementEnvironmentBlob(this.Constraints);
  }

  public PythonEnvironmentBlob postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitPythonEnvironmentBlob(this);
  }

  public PythonEnvironmentBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    this.Version = visitor.postVisitDeepVersionEnvironmentBlob(this.Version);
    this.Requirements =
        visitor.postVisitDeepListOfPythonRequirementEnvironmentBlob(this.Requirements);
    this.Constraints =
        visitor.postVisitDeepListOfPythonRequirementEnvironmentBlob(this.Constraints);
    return this.postVisitShallow(visitor);
  }
}
