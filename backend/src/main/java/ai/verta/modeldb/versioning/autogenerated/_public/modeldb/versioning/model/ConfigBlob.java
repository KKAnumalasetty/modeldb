// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class ConfigBlob {
  public List<HyperparameterSetConfigBlob> HyperparameterSet;
  public List<HyperparameterConfigBlob> Hyperparameters;

  public ConfigBlob() {
    this.HyperparameterSet = null;
    this.Hyperparameters = null;
  }

  public ConfigBlob setHyperparameterSet(List<HyperparameterSetConfigBlob> value) {
    this.HyperparameterSet = value;
    return this;
  }

  public ConfigBlob setHyperparameters(List<HyperparameterConfigBlob> value) {
    this.Hyperparameters = value;
    return this;
  }

  public static ConfigBlob fromProto(ai.verta.modeldb.versioning.ConfigBlob blob) {
    if (blob == null) {
      return null;
    }

    ConfigBlob obj = new ConfigBlob();
    {
      Function<ai.verta.modeldb.versioning.ConfigBlob, List<HyperparameterSetConfigBlob>> f =
          x ->
              blob.getHyperparameterSetList().stream()
                  .map(HyperparameterSetConfigBlob::fromProto)
                  .collect(Collectors.toList());
      obj.HyperparameterSet = f.apply(blob);
    }
    {
      Function<ai.verta.modeldb.versioning.ConfigBlob, List<HyperparameterConfigBlob>> f =
          x ->
              blob.getHyperparametersList().stream()
                  .map(HyperparameterConfigBlob::fromProto)
                  .collect(Collectors.toList());
      obj.Hyperparameters = f.apply(blob);
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.ConfigBlob.Builder toProto() {
    ai.verta.modeldb.versioning.ConfigBlob.Builder builder =
        ai.verta.modeldb.versioning.ConfigBlob.newBuilder();
    {
      if (this.HyperparameterSet != null) {
        Function<ai.verta.modeldb.versioning.ConfigBlob.Builder, Void> f =
            x -> {
              builder.addAllHyperparameterSet(
                  this.HyperparameterSet.stream()
                      .map(y -> y.toProto().build())
                      .collect(Collectors.toList()));
              return null;
            };
        f.apply(builder);
      }
    }
    {
      if (this.Hyperparameters != null) {
        Function<ai.verta.modeldb.versioning.ConfigBlob.Builder, Void> f =
            x -> {
              builder.addAllHyperparameters(
                  this.Hyperparameters.stream()
                      .map(y -> y.toProto().build())
                      .collect(Collectors.toList()));
              return null;
            };
        f.apply(builder);
      }
    }
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitConfigBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    visitor.preVisitDeepListOfHyperparameterSetConfigBlob(this.HyperparameterSet);
    visitor.preVisitDeepListOfHyperparameterConfigBlob(this.Hyperparameters);
  }

  public ConfigBlob postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitConfigBlob(this);
  }

  public ConfigBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    this.HyperparameterSet =
        visitor.postVisitDeepListOfHyperparameterSetConfigBlob(this.HyperparameterSet);
    this.Hyperparameters =
        visitor.postVisitDeepListOfHyperparameterConfigBlob(this.Hyperparameters);
    return this.postVisitShallow(visitor);
  }
}
