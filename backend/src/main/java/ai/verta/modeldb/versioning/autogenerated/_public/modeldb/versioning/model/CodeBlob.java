// THIS FILE IS AUTO-GENERATED. DO NOT EDIT
package ai.verta.modeldb.versioning.autogenerated._public.modeldb.versioning.model;

import ai.verta.modeldb.ModelDBException;
import ai.verta.modeldb.versioning.*;
import ai.verta.modeldb.versioning.blob.visitors.Visitor;
import java.util.*;
import java.util.function.Function;

public class CodeBlob {
  public GitCodeBlob Git;
  public NotebookCodeBlob Notebook;

  public CodeBlob() {
    this.Git = null;
    this.Notebook = null;
  }

  public CodeBlob setGit(GitCodeBlob value) {
    this.Git = value;
    return this;
  }

  public CodeBlob setNotebook(NotebookCodeBlob value) {
    this.Notebook = value;
    return this;
  }

  public static CodeBlob fromProto(ai.verta.modeldb.versioning.CodeBlob blob) {
    if (blob == null) {
      return null;
    }

    CodeBlob obj = new CodeBlob();
    {
      Function<ai.verta.modeldb.versioning.CodeBlob, GitCodeBlob> f =
          x -> GitCodeBlob.fromProto(blob.getGit());
      obj.Git = f.apply(blob);
    }
    {
      Function<ai.verta.modeldb.versioning.CodeBlob, NotebookCodeBlob> f =
          x -> NotebookCodeBlob.fromProto(blob.getNotebook());
      obj.Notebook = f.apply(blob);
    }
    return obj;
  }

  public ai.verta.modeldb.versioning.CodeBlob.Builder toProto() {
    ai.verta.modeldb.versioning.CodeBlob.Builder builder =
        ai.verta.modeldb.versioning.CodeBlob.newBuilder();
    {
      if (this.Git != null) {
        Function<ai.verta.modeldb.versioning.CodeBlob.Builder, Void> f =
            x -> {
              builder.setGit(this.Git.toProto());
              return null;
            };
        f.apply(builder);
      }
    }
    {
      if (this.Notebook != null) {
        Function<ai.verta.modeldb.versioning.CodeBlob.Builder, Void> f =
            x -> {
              builder.setNotebook(this.Notebook.toProto());
              return null;
            };
        f.apply(builder);
      }
    }
    return builder;
  }

  public void preVisitShallow(Visitor visitor) throws ModelDBException {
    visitor.preVisitCodeBlob(this);
  }

  public void preVisitDeep(Visitor visitor) throws ModelDBException {
    this.preVisitShallow(visitor);
    visitor.preVisitDeepGitCodeBlob(this.Git);
    visitor.preVisitDeepNotebookCodeBlob(this.Notebook);
  }

  public CodeBlob postVisitShallow(Visitor visitor) throws ModelDBException {
    return visitor.postVisitCodeBlob(this);
  }

  public CodeBlob postVisitDeep(Visitor visitor) throws ModelDBException {
    this.Git = visitor.postVisitDeepGitCodeBlob(this.Git);
    this.Notebook = visitor.postVisitDeepNotebookCodeBlob(this.Notebook);
    return this.postVisitShallow(visitor);
  }
}
